"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
import datetime
from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-txo!7#(asz(nhn2x8fa%4rhu9ymb2_*wtv$$7^9@+tb@6w^h07"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["climbing-mountain.com", "api.climbing-mountain.com", "127.0.0.1"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    "corsheaders",
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "climbing",
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": ("climbing.authentication.CookieJWTAuthentication",),
}

MIDDLEWARE = [
    "climbing.middleware.AccessLogMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "climbing.middleware.EnsureCharsetForJsonMiddleware",
]

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOWED_ORIGINS = [
    "https://climbing-mountain.com",
]

CSRF_TRUSTED_ORIGINS = [
    "https://climbing-mountain.com",
]

ROOT_URLCONF = "project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "project.wsgi.application"

SIMPLE_JWT = {
    # アクセストークンのCookie名
    "AUTH_COOKIE": "access_token",
    # リフレッシュトークンのCookie名
    "REFRESH_COOKIE": "refresh_token",
    # ユーザーIDのCookie名
    "USER_ID_COOKIE": "user_id",
    # CookieのSameSite属性
    "AUTH_COOKIE_SAMESITE": "None",
    # CookieのSecure属性
    "AUTH_COOKIE_SECURE": True,
    # アクセストークンの有効期限を設定
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=600),
    # リフレッシュトークンの有効期限を設定
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    # リフレッシュトークンの使用時に新しいトークンを発行するかどうかを設定(Falseの場合、リフレッシュトークンは使い回す)
    "ROTATE_REFRESH_TOKENS": True,
    # リフレッシュトークンが回転された後に古いトークンをブラックリストに追加するかどうかを設定(Trueの場合、古いトークンが無効化される)
    "BLACKLIST_AFTER_ROTATION": True,
    # 新しいトークンを取得したときにユーザーのlast_loginフィールドを更新するかどうかを設定
    "UPDATE_LAST_LOGIN": False,
    # トークンの署名に使用するアルゴリズムを設定
    "ALGORITHM": "HS256",
    # トークンの署名に使用する秘密鍵を設定
    "SIGNING_KEY": SECRET_KEY,
    # トークンの検証に使用する公開鍵を設定
    "VERIFYING_KEY": None,
    # トークンの受信者を指定する（オプション）
    "AUDIENCE": None,
    # トークンの発行者を指定する（オプション）
    "ISSUER": None,
    # JSON Web KeyのURLを指定する（オプション）
    "JWK_URL": None,
    # 時間の許容範囲を設定（オプション）
    "LEEWAY": 0,
    # 認証トークンのタイプを設定
    "AUTH_HEADER_TYPES": ("Bearer",),
    # 認証要求ヘッダーの名前を設定(HTTP_AUTHORIZATIONは標準のAuthorizationヘッダーを使用)
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    # トークンに含まれるユーザーIDのフィールド名を設定
    "USER_ID_FIELD": "email",
    # トークンに含まれるユーザーIDのクレーム名を設定
    "USER_ID_CLAIM": "email",
    # 使用するトークンクラスを設定
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    # トークンの種類(アクセストークン/リフレッシュトークン)を示すクレーム名を設定
    "TOKEN_TYPE_CLAIM": "token_type",
    # トークンのユーザークラスを設定
    "TOKEN_USER_CLASS": "climbing.models.MyCustomTokenUser",
    # トークンの識別子（JTI: JWT ID）を示すクレーム名を設定
    "JTI_CLAIM": "jti",
}

AUTHENTICATION_BACKENDS = (
    "climbing.auth_backends.EmailBackend",  # カスタムバックエンド
    "django.contrib.auth.backends.ModelBackend",  # デフォルトのバックエンド
)

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": "climbing",
        "USER": "root",
        "PASSWORD": "qnusxt2q",
        "HOST": "localhost",
        "PORT": "3306",
        "ATOMIC_REQUESTS": True,
    }
}

# climbingのカスタムユーザモデルを適用
AUTH_USER_MODEL = "climbing.User"

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "ja"

TIME_ZONE = "Asia/Tokyo"

USE_I18N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# HTTPS通信でのみCSRFトークンを含むCookieを送信
CSRF_COOKIE_SECURE = True
# CSRFトークンが保存されるCookieの名前
CSRF_COOKIE_NAME = "csrftoken"
# CSRFトークンをHTTPヘッダーに含める際のカスタムヘッダー名
CSRF_HEADER_NAME = "HTTP_X_CSRFTOKEN"
# CSRFトークンを含むCookieが適用されるドメイン
CSRF_COOKIE_DOMAIN = ".climbing-mountain.com"

# SSL_CERTIFICATE = "C:/AP/nginx-1.26.1/cert/api.climbing-mountain.com.pem"
# SSL_KEY = "C:/AP/nginx-1.26.1/cert/api.climbing-mountain.com-key.pem"

# logs ディレクトリのベースディレクトリを設定
log_base_dir = os.path.join(BASE_DIR, "logs")
if not os.path.exists(log_base_dir):
    os.makedirs(log_base_dir)

date = datetime.date.today().strftime("%Y%m%d")

LOGGER = {
    "ACCESS": "access_logger",
    "APP": "app_logger",
}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {
            "format": "[%(asctime)s.%(msecs)03d] %(message)s",
            "datefmt": "%Y/%m/%d %H:%M:%S",
        },
        "standard": {
            "format": "[%(asctime)s.%(msecs)03d][%(levelname)s] %(message)s",
            "datefmt": "%Y/%m/%d %H:%M:%S",
        },
        "verbose": {
            "format": "[%(asctime)s.%(msecs)03d][%(levelname)s] %(pathname)s:%(lineno)d %(message)s",
            "datefmt": "%Y/%m/%d %H:%M:%S",
        },
    },
    "handlers": {
        # アクセスログ専用のファイルハンドラー
        "access_file": {
            "level": "INFO",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": os.path.join(log_base_dir, f"backend_api_{date}.log"),
            "when": "midnight",
            "backupCount": 14,
            "formatter": "simple",
        },
        # アプリケーション固有ログのファイルハンドラー
        "app_file": {
            "level": "DEBUG",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": os.path.join(log_base_dir, f"backend_app_{date}.log"),
            "when": "midnight",
            "backupCount": 14,
            "formatter": "verbose",
        },
        # 上記以外のログ用ファイルハンドラー
        "module_file": {
            "level": "WARNING",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": os.path.join(log_base_dir, f"backend_module_{date}.log"),
            "when": "midnight",
            "backupCount": 14,
            "formatter": "verbose",
        },
        # アクセスログ専用のコンソールハンドラー
        "access_console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        # アプリケーション固有ログのコンソールハンドラー
        "app_console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "standard",
        },
        # 上記以外のログのコンソールハンドラー
        "module_console": {
            "level": "WARNING",
            "class": "logging.StreamHandler",
            "formatter": "standard",
        },
    },
    "loggers": {
        # Djangoのアクセスログ
        LOGGER["ACCESS"]: {
            "handlers": ["access_file"],
            "level": "INFO",
            "propagate": False,
        },
        # アプリケーション固有のログ
        LOGGER["APP"]: {
            "handlers": ["app_file"],
            "level": "DEBUG",
            "propagate": False,
        },
        # 上記以外のログのロガー設定
        "": {
            "handlers": ["module_file"],
            "level": "WARNING",
            "propagate": False,
        },
    },
}
