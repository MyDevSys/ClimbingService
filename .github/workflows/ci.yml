name: Climing Service CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: 

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      VAULT_ADDR: http://127.0.0.1:8200
      VAULT_TOKEN: root
      ALLOWED_HOSTS: ${{secrets.ALLOWED_HOSTS}}
      COOKIE_DOMAIN: ${{secrets.COOKIE_DOMAIN}}
      CORS_ALLOWED_ORIGINS: ${{secrets.CORS_ALLOWED_ORIGINS}}
      CSRF_TRUSTED_ORIGINS: ${{secrets.CSRF_TRUSTED_ORIGINS}}
      DB_HOST: 127.0.0.1
      DB_PORT: ${{secrets.DB_PORT}}
      DB_USER: ${{secrets.DB_USER}}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_PASSWORD: ${{secrets.DB_PASSWORD}}
      DEBUG: ${{secrets.DEBUG}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      BACKEND_BASE_URL: ${{secrets.BACKEND_BASE_URL}}
      FRONTEND_BASE_URL: ${{secrets.FRONTEND_BASE_URL}}
      GSI_TILE_URL: ${{secrets.GSI_TILE_URL}}
      TEST_EMAIL: ${{secrets.TEST_EMAIL}}
      TEST_PASSWORD: ${{secrets.TEST_PASSWORD}}

    services:
      vault:
        image: vault:1.13.3
        ports:
          - 8200:8200
        env:
          VAULT_DEV_ROOT_TOKEN_ID: root
        options: "--cap-add=IPC_LOCK"

      mysql:
        image: mysql:8.0
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.DB_NAME }}
        options: --health-cmd="mysqladmin ping --silent" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path:  ~/.cache/npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set up Apache2
        run: |
          sudo apt-get update
          sudo apt-get install -y apache2
          sudo systemctl start apache2
          sudo a2enmod actions alias allowmethods auth_basic authn_core authn_file authz_core authz_groupfile authz_host authz_user autoindex cgid dir env include mime negotiation proxy proxy_http proxy_wstunnel rewrite setenvif socache_shmcb ssl
          sudo cp -r .github/workflows/config/apache/sites-available/* /etc/apache2/sites-available/
          sudo echo "${{ secrets.SSL_CERT_MAIN }}" | sudo tee /etc/ssl/certs/climbing-service.crt > /dev/null
          sudo echo "${{ secrets.SSL_KEY_MAIN }}" | sudo tee /etc/ssl/private/climbing-service.key > /dev/null
          sudo echo "${{ secrets.SSL_CERT_API }}" | sudo tee /etc/ssl/certs/api-climbing-service.crt > /dev/null
          sudo echo "${{ secrets.SSL_KEY_API }}" | sudo tee /etc/ssl/private/api-climbing-service.key > /dev/null
          sudo chmod 644 /etc/ssl/certs/climbing-service.crt
          sudo chmod 600 /etc/ssl/private/climbing-service.key
          sudo chmod 644 /etc/ssl/certs/api-climbing-service.crt
          sudo chmod 600 /etc/ssl/private/api-climbing-service.key
          sudo a2ensite default-ssl.conf
          sudo a2ensite 000-default.conf
          sudo a2ensite climbing-service.com.conf
          sudo a2ensite api.climbing-service.com.conf
          sudo usermod -aG ssl-cert www-data
          sudo systemctl restart apache2
          
      - name: Install Vault CLI
        run: |
           curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
           sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
           sudo apt-get update && sudo apt-get install vault

      - name: Configure Vault
        run: |
          vault kv put secret/climbing-service/backend DB_NAME="$DB_NAME" DB_PASSWORD="$DB_PASSWORD" ALLOWED_HOSTS="$ALLOWED_HOSTS" COOKIE_DOMAIN="$COOKIE_DOMAIN" CORS_ALLOWED_ORIGINS="$CORS_ALLOWED_ORIGINS" CSRF_TRUSTED_ORIGINS="$CSRF_TRUSTED_ORIGINS" DB_HOST="$DB_HOST" DB_PORT="$DB_PORT" DB_USER="$DB_USER" DEBUG="$DEBUG" SECRET_KEY="$SECRET_KEY"
          vault kv put secret/climbing-service/frontend BACKEND_BASE_URL="$BACKEND_BASE_URL" FRONTEND_BASE_URL="$FRONTEND_BASE_URL" GSI_TILE_URL="$GSI_TILE_URL" 

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies for mysqlclient
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libmysqlclient-dev build-essential

      - name: Install Dependencies for Django
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Configure MySQL authentication plugin for localhost
        run: |
          mysql -u root -p$DB_PASSWORD -h 127.0.0.1 -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '$DB_PASSWORD';"
          mysql -u root -p$DB_PASSWORD -h 127.0.0.1 -e "FLUSH PRIVILEGES;"

      - name: Apply database migrations
        run: |
          cd backend
          python manage.py makemigrations climbing
          python manage.py migrate

      - name: Load fixtures into the database
        run: |
          cd backend
          python manage.py load_fixtures

      - name: Django API test
        run: |
          cd backend
          python manage.py test

      - name: Run Django development server
        run: |
          cd backend
          python manage.py runserver 0.0.0.0:8000 &

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies for Next.js
        run: |
          cd frontend
          npm install --production
          npm install sharp
          
      - name: Build Next.js application
        run: |
          cd frontend
          npm run build

      - name: Install Playwright Browsers
        run: | 
          npx playwright install --with-deps

      - name: E2E test
        run: |
          cd frontend/tests/playwright
          npx playwright test src/degradation
    
      
